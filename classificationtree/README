To compile this program:
------------------------

	1) compile it using sbt
		sbt compile
	2) pack it using sbt-pack
		sbt pack

sbt-pack creates executable scripts (for both linux-based system and windows) allowing to use the compiled classes easily. The script is placed in ./target/pack/bin

To use this program:
--------------------

a) the data-format script:
	./data-format datafile [-info] [-informat=X] [-outformat=Y]

	where
		* datafile is the name of the input file
		* -info prints on the standard input some stats about the input file
		* -informat=X specifies the input format of the file
		* -outformat=Y Z specifies the output format Y wanted and the name (without extension) of the output file Z (this option can be used multiple times to do multiple output at the same time)


b) the cp-decision-tree script:
	./cp-decision-tree datafile [-informat=X] 

	where
		* datafile is the name of the input file
		* -format=X specifies the input format of the file (by default: sparse)
		* -lb X Y specifies the minimum number of transaction at each leaf. If X=%, Y specify a pourcentage of the number of transaction in datafile, if X='#', Y specify a fixed number (by default: 0, i.e., no minimum)
		* -m X specifies the depth of the tree, i.e., the number layer of decision node (by default: 1)
		* -t X specifies the test file which should be of the same format as datafile (by default: none)
		* -TO X specify a time out in second (by default: none)
		* -heuristic X specifies the heuristic of feature selection applied during search (entropy for the heuristic detailed in the paper, lex for a lexicographic heuristic) (by default: lex)
		* -cache=X enables the use of the cache if X=yes, disables it if X=no (by default: yes)
		* -minprunning=X enables the prunning by minimum inside the tree if X=yes, disables it if X=no (by default: yes)


Files formats
-------------

The formats availables are (for now):
	- binarypre (format used by DL8)
		* '.txt' file
		* each lines is a represent a transaction
		* each lines is composed of 0 and 1's separated by a single space
		* first the class is given (1 if it belongs to the class of interest, 0 if not), then all the features (1 if the feature is present, 0 if not)
	- binarypost (format used by BinOCT)
		* '.csv' file
		* each lines is a represent a transaction
		* each lines is composed of 0 and 1's separated by a single ';'
		* first all the features (1 if the feature is present, 0 if not) are given, then the class (1 if it belongs to the class of interest, 0 if not)
	- sparse 
		* '.txt' file
		* each lines is a represent a transaction
		* each lines is composed of numbers separated by a single space
		* first all the ids of the features presents (ids ranges from 0 to n-1 (n = total number of features)) are given, then the class (1 if it belongs to the class of interest, 0 if not)










	
	
